import urllib
import zipfile
from subprocess import call
import distutils.dir_util
import glob
import os
import shutil
import numpy as np
from parse_splat_data import ParseSplatData

class SplatExperimentRunner(object):
    '''

    '''
    def __init__(self,
                  tx_config_file,
                  generic_lrp_file,
                  terrain_dir,
                  splat_exp_dir,
                  recv_antenna_height_meter = 10.0,
                  srtm2sdf_util_path='',
                  splat_bin_path='',
                  tx_range_km = -1.0,
                 ):
        '''

        :param tx_config_file: a tx_config file contains lat, lon, antenna-height per line per transmitters, you can use '#' for comments
        :param generic_lrp_file: the same values are copied for each transmitter, no need to hand-write lrp files for each transmitter
        :param terrain_dir: the directory where all the terrain tiles are automatically downloaded, can be both relative or absolute path
        :param splat_exp_dir: the directory where all the output files (pathlosss.dat, figure.ppm etc) of splat experiment runs are saved, can be relative or absolute path
        :param recv_antenna_height_meter: in meter, NOT feet,  2-5 meter can be a good choice
        :param srtm2sdf_util_path: path to the srtm2sdf executable, do not include the name 'srtm2sdf' itself,
                                for example the path is '/usr/bin/srtm2sdf/ then this param should be '/usr/bin' etc.
                                Not required if this path is added to the PATH variable so available to command-line
        :param splat_bin_path: path to the splat executable, do not include the name 'splat' itself,
                                for example the path is '/usr/bin/splat_v20/splat then this param should be '/usr/bin/splat_v20' etc.
                                Not required if this path is added to the PATH variable so available to command-line
        :param tx_range_km: the range of each transmitter, no signal value is generated by splat beyond this radius/range,
                        you can manually set or if skipped, then the distance between min. and max. latitude and longitude is taken as radius
        '''
        self.tx_config_file = os.path.abspath( tx_config_file )
        self.generic_lrp_file = os.path.abspath( generic_lrp_file )
        self.splat_exp_dir = os.path.abspath( splat_exp_dir )

        self.terrain_dir = os.path.abspath( terrain_dir )

        self.srtm2sdf_util_path = srtm2sdf_util_path
        self.splat_bin_path = splat_bin_path
        self.recv_antenna_height_meter = recv_antenna_height_meter
        #---------------------------#
        self.tx_counter = 0
        self.min_lat = self.min_lon =  float('inf')
        self.max_lat = self.max_lon = -float('inf')
        self.min_range_km = tx_range_km
        return

    def generateSplatInputFiles(self):
        distutils.dir_util.mkpath(self.splat_exp_dir)
        self.min_lat = self.min_lon =  float('inf')
        self.max_lat = self.max_lon = -float('inf')
        with open(tx_config_file, 'r') as f:
            self.tx_counter = 0
            for line in f:
                if line[0] =='#': continue
                self.tx_counter += 1
                line_vals = line.split(',')
                lat, lon, aheight = float( line_vals[0] ), -float( line_vals[1] ), float( line_vals[2] )
                tx_name_prefix = 'tx_'+str(self.tx_counter)
                tx_file_path_prefix = self.splat_exp_dir+"/"+tx_name_prefix
                #----create the qth file---------------#
                with open(tx_file_path_prefix+'.qth', 'w') as tf:
                    tf.write( tx_name_prefix+'\n'+str(lat)+'\n'+str(lon)+'\n'+str(aheight)  )
                #----create the lrp file---------------#
                shutil.copy( self.generic_lrp_file, tx_file_path_prefix+'.lrp' )
                self.min_lat, self.min_lon = min( self.min_lat, lat), min( self.min_lon, lon)
                self.max_lat, self.max_lon = max( self.max_lat, lat), max( self.max_lon, lon)
        if self.min_range_km <= 0.0:
            self.setMinimumRange()
        return

    def setMinimumRange(self):
        dlon = np.radians(self.max_lon) - np.radians(self.min_lon)
        dlat = np.radians(self.max_lat) - np.radians(self.min_lat)
        a = np.sin(dlat / 2) ** 2 + np.cos(self.max_lat) * np.cos(self.min_lat) * np.sin(dlon / 2) ** 2
        c = 2 * np.arcsin(np.sqrt(a))
        self.min_range_km = c *  6371.0
        return


    def generatePathlossFiles( self, isTerrainfilesAvailable = False):
        self.generateSplatInputFiles()
        if not isTerrainfilesAvailable:
            self.generateSplatTerrainFiles()
        #--splat command : splat -d ./sdfs  -t tx_site_2  -L 10.0 -R 10  -o tx_2_coverage  -ano tx_2_pathloss.dat
        #----now run the Splat experimente---#
        print "Generating pathloss maps for range :", self.min_range_km, "km and Antenna height :", self.recv_antenna_height_meter, "meter"
        owd = os.getcwd()
        os.chdir(self.splat_exp_dir)
        for qth_file in glob.glob('*.qth'):
            tx_name = os.path.splitext(qth_file)[0]
            print "DEBUG:tx_name:",tx_name
            call([self.splat_bin_path + "splat",\
                  "-d", str(self.terrain_dir),\
                  "-t", str(tx_name),\
                  "-L", str(self.recv_antenna_height_meter),\
                  "-R", str(self.min_range_km),\
                  "-metric" ,\
                  "-ano", str(tx_name)+"_pathloss.dat"\
                  ])
        os.chdir(owd)
        return


    def generateSplatTerrainFiles(self):
        '''
        :param min_lat:
        :param max_lat:
        :param min_lon: assumes + for western hemisphere
        :param max_lon: assumes + for western hemisphere
        :param terrain_dir:
        :param srtm2sdf_util_path:
        :return:
        '''
        terrain_temp_dir = self.terrain_dir+"/temp" #temporary directory to download and uncompress files
        distutils.dir_util.mkpath(terrain_temp_dir)
        #--finds out the corresponding tiles of min/max lat/lon
        min_lat_int, max_lat_int = int( np.floor(self.min_lat) ), int( np.floor(self.max_lat) )
        min_lon_int, max_lon_int = int(  np.ceil(self.min_lon) ), int( np.ceil(self.max_lon) )
        for cur_lat_int in range(min_lat_int - 1, max_lat_int+2): #download all NINE tiles:S north, south, east, west, north-east, north-west etc
            for cur_lon_int in range(min_lon_int-1, max_lon_int+2):
                lat_str, lon_str = str(cur_lat_int), str(cur_lon_int)
                if len( lon_str )<3:
                    lon_str = '0'+lon_str
                terrain_file = "N"+str( lat_str )+"W"+ lon_str+".hgt.zip"
                    #------- link example: https://dds.cr.usgs.gov/srtm/version2_1/SRTM3/North_America/N10W110.hgt.zip   ----#
                print  "Downloading Terrain file: ",terrain_file
                terrain_file_url = "https://dds.cr.usgs.gov/srtm/version2_1/SRTM3/North_America/"+terrain_file
                try:
                    urlfile = urllib.URLopener()
                    urlfile.retrieve(terrain_file_url, terrain_temp_dir +"/"+str(terrain_file))
                except IOError, e:
                    print "warning: terrain file "+terrain_file+" not found!"
                    continue
                #---uncompress the zip file-----------------#
                zip_ref = zipfile.ZipFile(terrain_temp_dir+"/"+ str(terrain_file), 'r')
                zip_ref.extractall(terrain_temp_dir)
                zip_ref.close()

        #-----now convert all the sdf files-------------#
        owd = os.getcwd()
        os.chdir(self.terrain_dir)
        for hgt_file in glob.glob('./temp/*.hgt'):
            call([self.srtm2sdf_util_path + "srtm2sdf", hgt_file])
        os.chdir(owd)

        shutil.rmtree(terrain_temp_dir) #remove the temporary directory created at the beginning



def  runSplatExp():
    splat_exp_runner = SplatExperimentRunner(   tx_config_file=tx_config_file,
                                                generic_lrp_file=generic_lrp_file,
                                                terrain_dir=terrain_dir,
                                                splat_exp_dir=splat_exp_dir,
                                                srtm2sdf_util_path=srtm2sdf_util_path,
                                                splat_bin_path=splat_bin_path,
                                                recv_antenna_height_meter=recv_antenna_height_meter,
                                                tx_range_km=tx_range_km
                                             )
    splat_exp_runner.generatePathlossFiles(isTerrainfilesAvailable=False) #set it True if terrain tiles have been already downloaded (after the first run),
                                                                          # so will not download again

def generatePathlossMaps():
    #-------now generate the pathloss map for each transmitter -------------------#
    distutils.dir_util.mkpath(os.path.abspath(pathlossMapOutputDirectory))
    pd = ParseSplatData(ref_lat, ref_lon, limit_x, limit_y, grid_x, grid_y)

    for dat_file in glob.glob(splat_exp_dir+'/*.dat'):
        tx_name = os.path.splitext( os.path.basename(dat_file))[0]
        outmapfile = os.path.abspath(pathlossMapOutputDirectory)+"/"+tx_name
        pd.generateMap(dat_file , outmapfile )


#------------global parameters-------------------------#
#check __init__ documentation (beginning of this file) for descirption of the folloiwng params
tx_config_file = './tx_configs/tx_config.txt'
generic_lrp_file = './tx_configs/generic_tx.lrp'
splat_exp_dir = './splat_temp/' #change this directory for new experiment, else will be overwritten
terrain_dir = './terrain_files/'
tx_range_km = 25.0
srtm2sdf_util_path = ''
splat_bin_path = ''
recv_antenna_height_meter = 20.0
pathlossMapOutputDirectory = './pathloss_maps_tx_flat'
ref_lat, ref_lon = 39.177643, -78.266090
limit_x, limit_y = 5000.0, 5000.0
grid_x, grid_y = 100, 100
#------------------------------------------------------#
if __name__ == '__main__':
    np.random.seed(1009993)
    runSplatExp()
    generatePathlossMaps()

